// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(doc, nav) {
    var Ball, detect, draw, initialize, _saveContextProperties,
      _this = this;
    Ball = (function() {
      function Ball(x, y) {
        this.x = x;
        this.y = y;
        this._clamp = __bind(this._clamp, this);
        this._threshold = __bind(this._threshold, this);
        this.readOffset = __bind(this.readOffset, this);
        this.gradient = __bind(this.gradient, this);
        this.draw = __bind(this.draw, this);
        this.radius = 100;
      }

      Ball.prototype.draw = function(context) {
        context.beginPath();
        context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false);
        context.fillStyle = this.gradient(context);
        return context.fill();
      };

      Ball.prototype.gradient = function(context) {
        var gradient;
        gradient = context.createLinearGradient(this.x - this.radius, this.y - this.radius, this.x + this.radius, this.y + this.radius);
        gradient.addColorStop(0, "white");
        gradient.addColorStop(0.5, "rgb(128,128,0)");
        gradient.addColorStop(1, "black");
        return gradient;
      };

      Ball.prototype.readOffset = function(imageData) {
        var changed, g, nextX, nextY, pos, r, scale, velocityX, velocityY;
        pos = ((this.y * imageData.width) + this.x) * 4;
        r = imageData.data[pos];
        g = imageData.data[pos + 1];
        console.log("" + r + "," + g);
        scale = 16;
        velocityX = this._threshold(Math.floor((r - 128) / scale), 5);
        velocityY = this._threshold(Math.floor((g - 128) / scale), 5);
        nextX = this._clamp(this.x + velocityX, 0, imageData.width - 1);
        nextY = this._clamp(this.y + velocityY, 0, imageData.height - 1);
        changed = !(nextX === this.x && nextY === this.y);
        if (changed) {
          console.dir("(" + this.x + "," + this.y + ") => (" + nextX + "," + nextY + ")");
        }
        this.x = nextX;
        this.y = nextY;
        return changed;
      };

      Ball.prototype._threshold = function(value, threshold) {
        if (Math.abs(value) < threshold) {
          return 0;
        } else {
          return value;
        }
      };

      Ball.prototype._clamp = function(value, min, max) {
        return Math.min(max, Math.max(min, value));
      };

      return Ball;

    })();
    detect = function() {
      return initialize();
    };
    initialize = function() {
      console.log("Starting");
      _this.canvas = doc.getElementById("balls");
      _this.width = canvas.width;
      _this.height = canvas.height;
      _this.context = canvas.getContext("2d");
      _this.balls = [];
      _this.balls.push(new Ball(0.40 * _this.width, 0.40 * _this.height));
      _this.balls.push(new Ball(0.40 * _this.width, 0.60 * _this.height));
      _this.dirty = true;
      _this.canvas.onclick = function() {
        return _this.dirty = true;
      };
      draw();
      return console.log("Started");
    };
    draw = function() {
      var ball, dirty, imageData, saved, _i, _j, _len, _len1, _ref, _ref1;
      if (_this.dirty) {
        saved = _saveContextProperties(_this.context);
        _this.context.fillStyle = "black";
        _this.context.fillRect(0, 0, _this.width, _this.height);
        _ref = _this.balls;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ball = _ref[_i];
          _this.context.globalCompositeOperation = "lighter";
          ball.draw(_this.context);
        }
        imageData = _this.context.getImageData(0, 0, _this.width, _this.height);
        _this.dirty = false;
        _ref1 = _this.balls;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          ball = _ref1[_j];
          dirty = ball.readOffset(imageData);
        }
        saved.restore();
      }
      return requestAnimationFrame(draw);
    };
    _saveContextProperties = function(context) {
      var fillStyle, globalCompositeOperation;
      globalCompositeOperation = context.globalCompositeOperation;
      fillStyle = context.fillStyle;
      return {
        restore: function() {
          _this.context.globalCompositeOperation = globalCompositeOperation;
          return _this.context.fillStyle = fillStyle;
        }
      };
    };
    return addEventListener("DOMContentLoaded", detect);
  })(document, navigator);

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
