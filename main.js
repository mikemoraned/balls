// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(doc, nav) {
    var Ball, VectorReader, detect, draw, initialize, _saveContextProperties,
      _this = this;
    VectorReader = (function() {
      function VectorReader() {
        this._threshold = __bind(this._threshold, this);
        this.readVectorAt = __bind(this.readVectorAt, this);
      }

      VectorReader.prototype.readVectorAt = function(x, y, imageData) {
        var g, pos, r, scale, velocityX, velocityY;
        pos = ((y * imageData.width) + x) * 4;
        r = imageData.data[pos];
        g = imageData.data[pos + 1];
        scale = 16;
        velocityX = this._threshold(Math.floor((r - 128) / scale), 5);
        velocityY = this._threshold(Math.floor((g - 128) / scale), 5);
        return {
          x: velocityX,
          y: velocityY
        };
      };

      VectorReader.prototype._threshold = function(value, threshold) {
        if (Math.abs(value) < threshold) {
          return 0;
        } else {
          return value;
        }
      };

      return VectorReader;

    })();
    Ball = (function() {
      function Ball(x, y, reader) {
        this.x = x;
        this.y = y;
        this.reader = reader;
        this._clamp = __bind(this._clamp, this);
        this.readOffset = __bind(this.readOffset, this);
        this.draw = __bind(this.draw, this);
        this.radius = 10;
      }

      Ball.prototype.draw = function(context) {
        context.beginPath();
        context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false);
        context.strokeStyle = "red";
        return context.stroke();
      };

      Ball.prototype.readOffset = function(imageData) {
        var changed, nextX, nextY, velocity;
        velocity = this.reader.readVectorAt(this.x, this.y, imageData);
        nextX = this._clamp(this.x + velocity.x, 0, imageData.width - 1);
        nextY = this._clamp(this.y + velocity.y, 0, imageData.height - 1);
        changed = !(nextX === this.x && nextY === this.y);
        this.x = nextX;
        this.y = nextY;
        return changed;
      };

      Ball.prototype._clamp = function(value, min, max) {
        return Math.min(max, Math.max(min, value));
      };

      return Ball;

    })();
    detect = function() {
      return initialize();
    };
    initialize = function() {
      var i, numBalls;
      console.log("Starting");
      _this.canvas = doc.getElementById("balls");
      _this.width = canvas.width;
      _this.height = canvas.height;
      _this.context = canvas.getContext("2d");
      _this.reader = new VectorReader;
      numBalls = 5000;
      _this.balls = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= numBalls ? _i < numBalls : _i > numBalls; i = 0 <= numBalls ? ++_i : --_i) {
          _results.push(new Ball(Math.floor(Math.random() * width), Math.floor(Math.random() * height), this.reader));
        }
        return _results;
      }).call(_this);
      _this.dirty = true;
      _this.canvas.addEventListener('click', function(e) {
        if (e.shiftKey) {
          console.log("Adding");
          _this.balls.push(new Ball(e.offsetX, e.offsetY, _this.reader));
          return _this.dirty = true;
        } else {
          console.log("Marking as dirty");
          return _this.dirty = true;
        }
      });
      _this.canvas.addEventListener('mousemove', function(e) {
        var imageData, velocity, x, y;
        imageData = _this.context.getImageData(0, 0, _this.width, _this.height);
        x = e.offsetX;
        y = e.offsetY;
        velocity = _this.reader.readVectorAt(x, y, imageData);
        console.log("" + x + "," + y + ": v.x: " + velocity.x + ", v.y: " + velocity.y);
        _this.context.strokeStyle = "green";
        _this.context.moveTo(x, y);
        _this.context.lineTo(x + velocity.x, y);
        _this.context.stroke();
        _this.context.moveTo(x, y);
        _this.context.lineTo(x, y + velocity.y);
        return _this.context.stroke();
      });
      draw();
      return console.log("Started");
    };
    draw = function() {
      var ball, dirty, gradientA, gradientB, imageData, saved, _i, _j, _len, _len1, _ref, _ref1;
      if (_this.dirty) {
        saved = _saveContextProperties(_this.context);
        _this.context.fillStyle = "black";
        _this.context.fillRect(0, 0, _this.width, _this.height);
        _this.context.globalCompositeOperation = "lighter";
        gradientA = _this.context.createLinearGradient(0, 0, 0, _this.height);
        gradientA.addColorStop(0, "rgb(0,0,0)");
        gradientA.addColorStop(1, "rgb(255,0,0)");
        _this.context.fillStyle = gradientA;
        _this.context.fillRect(0, 0, _this.width, _this.height);
        gradientB = _this.context.createLinearGradient(0, 0, _this.width, 0);
        gradientB.addColorStop(0, "rgb(0,0,0)");
        gradientB.addColorStop(1, "rgb(0,255,0)");
        _this.context.fillStyle = gradientB;
        _this.context.fillRect(0, 0, _this.width, _this.height);
        _ref = _this.balls;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ball = _ref[_i];
          ball.draw(_this.context);
        }
        imageData = _this.context.getImageData(0, 0, _this.width, _this.height);
        _this.dirty = false;
        _ref1 = _this.balls;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          ball = _ref1[_j];
          dirty = ball.readOffset(imageData);
          _this.dirty = _this.dirty || dirty;
        }
        saved.restore();
      }
      return requestAnimationFrame(draw);
    };
    _saveContextProperties = function(context) {
      var fillStyle, globalCompositeOperation;
      globalCompositeOperation = context.globalCompositeOperation;
      fillStyle = context.fillStyle;
      return {
        restore: function() {
          _this.context.globalCompositeOperation = globalCompositeOperation;
          return _this.context.fillStyle = fillStyle;
        }
      };
    };
    return addEventListener("DOMContentLoaded", detect);
  })(document, navigator);

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
