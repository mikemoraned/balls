// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(doc, nav) {
    var Ball, detect, draw, initialize,
      _this = this;
    Ball = (function() {
      function Ball(x, y) {
        this.x = x;
        this.y = y;
        this.gradient = __bind(this.gradient, this);
      }

      Ball.prototype.gradient = function(context) {
        var gradient;
        gradient = context.createRadialGradient(this.x, this.y, 15, this.x, this.y, 100);
        gradient.addColorStop(0, '#00C9FF');
        gradient.addColorStop(0.8, '#00B5E2');
        gradient.addColorStop(1, 'rgba(0,201,255,0)');
        return gradient;
      };

      return Ball;

    })();
    detect = function() {
      return initialize();
    };
    initialize = function() {
      var i;
      console.log("Starting");
      _this.canvas = doc.getElementById("balls");
      _this.width = canvas.width;
      _this.height = canvas.height;
      _this.context = canvas.getContext("2d");
      _this.balls = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; _i <= 5; i = ++_i) {
          _results.push(new Ball(Math.random() * width, Math.random() * height));
        }
        return _results;
      })();
      _this.dirty = true;
      draw();
      return console.log("Started");
    };
    draw = function() {
      var ball, _i, _len, _ref;
      if (_this.dirty) {
        _ref = _this.balls;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ball = _ref[_i];
          _this.context.globalCompositeOperation = "multiply";
          _this.context.fillStyle = ball.gradient(_this.context);
          _this.context.fillRect(0, 0, _this.width, _this.height);
        }
        _this.dirty = false;
      }
      return requestAnimationFrame(draw);
    };
    return addEventListener("DOMContentLoaded", detect);
  })(document, navigator);

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
